#define TAU 6.28318530717958623199592693709
#define timefunc (glfwGetTime() * 0.025f * ft.ft)
#define rand_div 0.000030518509476f

const unsigned int roadx = 11;
const unsigned int roady = 200;
const float scalex = 2.5f;
const float scaley = 60.0f;
const unsigned int mountainx = 20;
const unsigned int sunres = 64;
const float end_dist = scaley * 35.0f;
float dist_traveled = 0.0f;

std::vector<glm::vec3> roadBuffer;
std::vector<unsigned int> roadIndex;
std::vector<glm::vec3> rmbuffer;
std::vector<glm::vec3> lmbuffer;
std::vector<unsigned int> lmountainEB;
std::vector<unsigned int> rmountainEB;

std::vector<glm::vec3> starbuffer;
std::vector<unsigned int> starindex;

std::vector<glm::vec3> sunverts;
std::vector<unsigned int> sunindex;

sunverts.push_back(glm::vec3(0.0f, 0.0f, 0.0f));

for (int i = 0; i < sunres; i++) {
    float h = (float)i * TAU;
    sunverts.push_back(glm::vec3(cos(h / sunres) * 130.0f, 0.0f, sin(h / sunres) * 115.0f));
}
for (unsigned int i = 1; i <= sunres; i++) {
    sunindex.push_back(0);
    sunindex.push_back(i);
    sunindex.push_back(i % sunres ? i + 1 : 1);
}

for (int y = 0; y < roady; y++) {
    for (int x = 0; x < roadx; x++) {
        int offset = (y * (roadx * 3)) + (x * 3);
        roadBuffer.push_back(glm::vec3((scalex * ((float)x / (roadx - 1))) - (0.5f * scalex), (scaley * ((float)y / (roady - 1))) - (0.5f * scaley), 0.0f));
    }
}
for (int y = 0; y < roady * 0.25f; y++) {
    for (int x = 0; x < mountainx; x++) {
        float xo = roadBuffer[0].x - 1.5 * x,
            x2 = -roadBuffer[0].x + 1.5 * x,
            yo = (scaley * (4 * (float)y / (roady - 1))) - (0.5f * scaley);
        lmbuffer.push_back(glm::vec3(xo, yo, (x != 0) ? 2 * pow(((float)rand() / RAND_MAX), 2) : 0.0f));
        rmbuffer.push_back(glm::vec3(x2, yo, (x != 0) ? 2 * pow(((float)rand() / RAND_MAX), 2) : 0.0f));
    }
}
for (int x = 0; x < mountainx; x++) {
    float xo = roadBuffer[0].x - 1.5 * x,
        x2 = -roadBuffer[0].x + 1.5 * x,
        yo = (scaley * (4 * (roady * 0.25f) / (roady - 1))) - (0.5f * scaley);
    lmbuffer.push_back(glm::vec3(xo, yo, lmbuffer[x].z));
    rmbuffer.push_back(glm::vec3(x2, yo, rmbuffer[x].z));
}

//road Indexes
for (int y = 0; y < (roady - 1); y++) {
    unsigned int h[6];
    for (int x = 0; x < (roadx - 1); x++) {
        unsigned int s = (y * roadx) + x;
        unsigned int s1 = ((y + 1) * roadx) + x;
        roadIndex.insert(roadIndex.end(), { s, s + 1, s1, s1, s1 + 1, s + 1 });
    }
}

//index buffers for mountains
for (int y = 0; y < (roady * 0.25f); y++) {
    unsigned int h[6];
    for (int x = 0; x < (mountainx - 1); x++) {
        unsigned int s = (y * mountainx) + x;
        unsigned int s1 = ((y + 1) * mountainx) + x;
            
        lmountainEB.insert(lmountainEB.end(), { s, s + 1, s1, s + 1, s1 + 1, s1 });
        rmountainEB.insert(rmountainEB.end(), { s, s1, s + 1, s1 + 1, s + 1, s1 });
    }
}

//assigns stars random positions
for (int n = 0; n < 10000; n++) {
    starbuffer.push_back(glm::vec3(30.0f - ((float)rand() * rand_div) * 60.0f, 0.0f - ((float)rand() * rand_div) * scaley, 2.5f + ((float)rand() * rand_div) * 8.0f));
    starindex.push_back(n);
}